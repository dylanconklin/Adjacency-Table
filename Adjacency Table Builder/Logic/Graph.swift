//
//  Graph.swift
//  Adjacency Table
//
//  Created by Dylan Conklin on 7/21/23.
//

import Foundation

typealias Vertex = String

struct Graph: Equatable {
    private var graphEdges: Set<Edge> = []
    private var graphVertices: Set<Vertex> = []

    mutating func insert(_ vertex: Vertex) {
        graphVertices.insert(vertex)
    }

    mutating func insert(_ edge: Edge) {
        graphEdges.insert(edge)
        insert(edge.from)
        insert(edge.to)
    }

    var isEmpty: Bool {
        graphEdges.isEmpty && graphVertices.isEmpty
    }

    mutating func remove(_ vertex: Vertex) {
        graphEdges.filter({ $0.vertices.contains(vertex) }).forEach { edge in
            self.graphEdges.remove(edge)
        }
        graphVertices.remove(vertex)
    }

    /// Returns the vertices of the graph
    var vertices: [Vertex] {
        get {
            graphVertices.sorted()
        }
        set {
            Set<Vertex>(vertices).symmetricDifference(Set<Vertex>(newValue)).forEach { vertex in
                if self.vertices.count < newValue.count {
                    insert(Edge(from: vertex, to: vertex, weight: 0))
                } else {
                    remove(vertex)
                }
            }
        }
    }

    /// Calculates the total cost of the graph
    /// The cost is the sum of the weight (length) of all the edges in the graph
    var cost: Double {
        edges.reduce(0.0, { $0 + $1.weight })
    }

    /// Generate the Minimum Spanning Tree (MST)
    /// - Returns: The MST Graph generated by the edges in the graph
    var mst: Graph {
        var G: Graph = self
        var vertices_left: Set<Vertex> = Set<Vertex>(G.vertices) // vertices that don't have an edge
        var MST: Graph = Graph()

        while let edge =
            G.edges
                .filter({
                    !Set<Vertex>($0.vertices)
                        .intersection(vertices_left).isEmpty && !Set<Vertex>($0.vertices).intersection(MST.vertices).isEmpty
                })
                .sorted(by: { $0.weight < $1.weight })
                .first ?? (MST.isEmpty ? G.edges.sorted(by: { $0.weight < $1.weight }).first : nil) {
            MST.insert(edge)
            for vertex in edge.vertices {
                vertices_left.remove(vertex)
            }
            G.graphEdges.remove(edge)
        }

        return MST
    }

    /// Returns edges of the graph, in the form of Edge objects in an array
    var edges: [Edge] {
        get {
            graphEdges.sorted()
        }
        set {
            graphEdges = Set<Edge>(newValue)
        }
    }

    func edges(from: String, to: String, directional: Bool = true) -> Set<Edge> {
        var result: Set<Edge> = Set<Edge>()
        let f = directional ? { (from: String, to: String, edge: Edge) -> Bool in
            edge.to == to && edge.from == from
        } : { (from: String, to: String, edge: Edge) -> Bool in
            Set<Vertex>(edge.vertices) == Set<Vertex>(arrayLiteral: from, to)
        }

        edges.forEach { edge in
            if f(from, to, edge) {
                result.insert(edge)
            }
        }

        return result
    }

    var leaves: Set<Vertex> {
        Set<Vertex>(vertices.filter { vertex in
            graphEdges.filter { $0.from == vertex }.isEmpty
        })
    }

    var isCyclic: Bool {
        var graph: Graph = self

        while !graph.leaves.isEmpty {
            graph.leaves.forEach({ graph.remove($0) })
        }

        return !graph.isEmpty
    }
}
